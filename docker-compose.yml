services:
  redis:
    image: redis:7
    container_name: llm-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - llm_llm-backend
    ports:
      - "6379:6379"
    command: ["redis-server", "--bind", "0.0.0.0", "--protected-mode", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s

  llm:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5555:5555"
    volumes:
      - ${WORK_DIR:-/home/troll/sites/llm}:/llama.cpp/models
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/api/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    container_name: llm-llm
    restart: unless-stopped
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - llm_llm-backend
      - default
    develop:
      watch:
        - path: ./backend
          action: rebuild

  nextjs:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:5555
      - PORT=5000
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./frontend:/app
      - /app/node_modules # чтобы не затирать node_modules хостовой папкой
    command: npm run dev
    depends_on:
      llm:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5000"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    container_name: llm-nextjs  
    restart: unless-stopped
    networks:
      - default
    develop:
      watch:
        - path: ./frontend
          action: rebuild

networks:
  llm_llm-backend:
    # internal: true # чтобы скрыть сеть
  default:

volumes:
  redis_data: