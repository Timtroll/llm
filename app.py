from fastapi import FastAPI
import subprocess
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
MODELS_CONFIG = {
    "llama-7b": {
        "path": "/llama.cpp/models/llama-7b.Q4_0.gguf",
        "default_tokens": 128,
        "default_temp": 0.7
    },
    "model-q4": {
        "path": "/llama.cpp/models/model-q4_K.gguf",
        "default_tokens": 128,
        "default_temp": 0.7
    }
}

# üìå –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ –ø–∞–º—è—Ç–∏)
HISTORY = {}

@app.post("/generate")
async def generate_text(prompt: dict):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if "text" not in prompt:
        logger.error("–ü–æ–ª–µ 'text' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–ø—Ä–æ—Å–µ")
        return {"error": "–ü–æ–ª–µ 'text' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –∑–∞–ø—Ä–æ—Å–µ"}

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    session_id = prompt.get("session_id", "default")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏
    if prompt.get("reset", False):
        HISTORY.pop(session_id, None)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤–∞—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö)
    model_name = prompt.get("model", list(MODELS_CONFIG.keys())[0])
    if model_name not in MODELS_CONFIG:
        logger.error(f"–ú–æ–¥–µ–ª—å '{model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return {"error": f"–ú–æ–¥–µ–ª—å '{model_name}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"}

    model_config = MODELS_CONFIG[model_name]

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    n_tokens = prompt.get("n_tokens", model_config["default_tokens"])
    temperature = prompt.get("temp", model_config["default_temp"])

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    top_p = prompt.get("top_p")
    top_k = prompt.get("top_k")
    repeat_penalty = prompt.get("repeat_penalty")
    seed = prompt.get("seed")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
    main_path_candidates = [
        "/llama.cpp/build/bin/llama-cli",
        "/llama.cpp/build/llama-cli",
        "/llama.cpp/build/bin/main",
        "/llama.cpp/build/main"
    ]

    main_path = None
    for path in main_path_candidates:
        if os.path.isfile(path):
            main_path = path
            break

    if not main_path:
        logger.error("–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {"error": "–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª (llama-cli –∏–ª–∏ main) –Ω–µ –Ω–∞–π–¥–µ–Ω"}

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    russian_instruction = (
        "–¢—ã ‚Äî —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –≥—Ä–∞–º–æ—Ç–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ.\n\n"
    )

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
    history_messages = HISTORY.get(session_id, [])
    current_user_input = prompt["text"]
    history_messages.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_user_input}")

    full_prompt = russian_instruction + "\n".join(history_messages)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    command = [
        main_path,
        "-m", model_config["path"],
        "-p", full_prompt,
        "-n", str(n_tokens),
        "--temp", str(temperature)
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–¥–∞–Ω—ã
    if top_p is not None:
        command.extend(["--top-p", str(top_p)])
    if top_k is not None:
        command.extend(["--top-k", str(top_k)])
    if repeat_penalty is not None:
        command.extend(["--repeat-penalty", str(repeat_penalty)])
    if seed is not None:
        command.extend(["--seed", str(seed)])

    try:
        logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {' '.join(command)}")
        process = subprocess.run(command, capture_output=True, text=True, timeout=300)

        if process.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {process.stderr}")
            return {"error": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {process.stderr}"}

        response = process.stdout.strip()
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —É—Å–ø–µ—à–Ω–∞")

        # –î–æ–±–∞–≤–∏–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        history_messages.append(f"–ü–æ–º–æ—â–Ω–∏–∫: {response}")
        HISTORY[session_id] = history_messages

        return {
            "response": response,
            "model": model_name,
            "session_id": session_id,
            "parameters": {
                "n_tokens": n_tokens,
                "temperature": temperature,
                "top_p": top_p,
                "top_k": top_k,
                "repeat_penalty": repeat_penalty,
                "seed": seed
            }
        }
    except subprocess.TimeoutExpired:
        logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        return {"error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"}


# üìå –ü—Ä–∏–º–µ—Ä—ã –≤—ã–∑–æ–≤–∞:
"""
1) –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥, —Å–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏:
POST /generate
Content-Type: application/json

{
    "text": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
    "reset": true,
    "session_id": "user123"
}

2) –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–µ—Å—Å–∏–µ–π:
POST /generate
Content-Type: application/json

{
    "text": "–ê –º–æ–∂–µ—à—å –æ–±—ä—è—Å–Ω–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?",
    "session_id": "user123"
}

3) –°–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:
POST /generate
Content-Type: application/json

{
    "text": "–ù–∞–ø–∏—à–∏ —Ä–∞—Å—Å–∫–∞–∑ –ø—Ä–æ —Ä–æ–±–æ—Ç–∞",
    "model": "model-q4",
    "temp": 0.8,
    "n_tokens": 150,
    "top_p": 0.9,
    "top_k": 40,
    "repeat_penalty": 1.1,
    "seed": 42,
    "session_id": "user456"
}

4) –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç—ã –∏ –æ–¥–Ω–∞ —Å–µ—Å—Å–∏—è):
POST /generate
Content-Type: application/json

{
    "text": "–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç"
}
"""
